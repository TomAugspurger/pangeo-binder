binderhub:
  rbac:
    enabled: true

  config:
    BinderHub:
      build_image: jupyter/repo2docker:0.10.0-100.g0dba611
      use_registry: true
      use_named_servers: true
      auth_enabled: true
      per_repo_quota: 150
      template_path: /etc/binderhub/custom/templates
      extra_static_path: /etc/binderhub/custom/static
      extra_static_url_prefix: /extra_static/
      about_message: |
        <p>binder.pangeo.io is public infrastructure operated by the <a href="https://pangeo.io">Pangeo Project team</a>.<br /><br />
  ingress:
    enabled: true
    annotations:
      kubernetes.io/ingress.class: nginx
    https:
      enabled: true
      type: kube-lego
  jupyterhub:
    ingress:
        enabled: true
        annotations:
          ingress.kubernetes.io/proxy-body-size: 64m
          kubernetes.io/ingress.class: nginx
          kubernetes.io/tls-acme: 'true'
    cull:
      # don't cull authenticated users
      users: False
      # cull every 11 minutes so it is out of phase
      # with the proxy check-routes interval of five minutes
      every: 660
      timeout: 600
      # maxAge is 3 hours: 3 * 3600 = 10800
      maxAge: 10800
    scheduling:
      userScheduler:
        enabled: true
        replicas: 1
      podPriority:
        enabled: true
      userPlaceholder:
        enabled: false
      userPods:
        nodeAffinity:
          matchNodePurpose: require
    singleuser:
      serviceAccountName: daskkubernetes
      # start jupyter lab
      cmd: jupyter-lab
      cloudMetadata:
        enabled: true
      cpu:
        limit: 4
        guarantee: 1
      memory:
        limit: 8G
        guarantee: 8G
      # to make notebook servers aware of hub
      cmd: jupyterhub-singleuser
    hub:
      resources:
        requests:
          cpu: "0.25"
          memory: 512Mi
        limits:
          cpu: "1.25"
          memory: 1Gi
      namedServerLimitPerUser: 5
      redirectToServer: false
      allowNamedServers: true
      # change this value as you wish,
      # or remove this line if you don't want to have any limit
      # namedServerLimitPerUser: 5
      redirectToServer: false
      services:
        binder:
          oauth_redirect_uri: "https://staging.binder.pangeo.io/hub/oauth_callback"
          oauth_client_id: "staging.binder.pangeo.io"
      extraConfig:
        binder: |
          from kubespawner import KubeSpawner

          class BinderSpawner(KubeSpawner):
            def start(self):
                if 'image' in self.user_options:
                  # binder service sets the image spec via user options
                  self.image = self.user_options['image']
                return super().start()
          c.JupyterHub.spawner_class = BinderSpawner
    proxy:
      chp:
        resources:
          requests:
            memory: 256Mi
            cpu: "0.25"
          limits:
            memory: 512Mi
            cpu: "0.5"
      nginx:
        resources:
          requests:
            memory: 256Mi
            cpu: "0.25"
          limits:
            memory: 1Gi
            cpu: 1

  initContainers:
    - name: git-clone-templates
      image: alpine/git
      args:
        - clone
        - --single-branch
        - --branch=master
        - --depth=1
        - --
        - https://github.com/pangeo-data/pangeo-custom-binderhub-templates.git
        - /etc/binderhub/custom
      securityContext:
        runAsUser: 0
      volumeMounts:
        - name: custom-templates
          mountPath: /etc/binderhub/custom
  extraVolumes:
    - name: custom-templates
      emptyDir: {}
  extraVolumeMounts:
    - name: custom-templates
      mountPath: /etc/binderhub/custom
  dind:
    enabled: true
    daemonset:
      image:
        name: docker
        tag: 18.09.2-dind

  imageCleaner:
    enabled: true
    # when 80% of inodes are used,
    # cull images until only 40% are used.
    imageGCThresholdHigh: 80
    imageGCThresholdLow: 40
    host:
      enabled: false

nginx-ingress:
  rbac:
    create: true
  defaultBackend:
    minAvailable: 0

  controller:
    replicaCount: 1
    scope:
      enabled: true
    config:
      # Allow POSTs of upto 64MB, for large notebook support.
      proxy-body-size: 64m
    resources:
      requests:
        cpu: 0.25
        memory: 240Mi
      limits:
        cpu: 0.5
        memory: 240Mi
   
    service:
      # Preserve client IPs
      externalTrafficPolicy: Local

kube-lego:
  config:
    LEGO_EMAIL: jhamman@ucar.edu
    LEGO_URL: https://acme-v01.api.letsencrypt.org/directory
  rbac:
    create: true
  image:
    tag: 0.1.7
